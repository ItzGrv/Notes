What is REST ASSURED and How it works ?

REST stands for REpresentational State Transfer. REST Assured is a java library used for testing and validating the Restful Web Services. It supports Behavior-Driven Development(BDD) syntax like Given, When, and Then notations.

Let us understand how the Rest Assured Works
* 		Create an HTTP request with all the details
* 		Send the request over the network
* 		Validate the received Response

HTTP Request 

The client sends the request to the server to fetch some information or data. Additionally, the client's request is an HTTP Request, which communicates between the client and the server, or you may say, two different computer systems. Moreover, it is a simple text file formatted in either XML or JSON, which sends the client's binary data to the server.

An HTTP request consists of the following

1. URL

The Request URL is the unique address used to make a request. URL consists of the Base URL, Resource, Query, or Path Parameters.
Example: https://reqres.in/api/users/2

2. Base URL
It is the Base Address for the particular API.

3. Resource
A Resource represents the collection that can be accessed from the server.

4. Path Parameter
The Path parameter is the variable part of a URL. It is used to point to a particular resource within a collection, such as a user with a specific ID. In Path Parameter we move to the sub-resource.

5. Query Parameter
Query Parameters are optional parameters. It is used to sort/filter the resource. For appending query parameter ‘?’ is added to the end of the URL and implemented as a key-value pair. For Appending multiple query parameters ‘&’ is used in between the key-value pairs.

6. HTTP Method/Verb
The four basic Create, Read, Update and Delete (CRUD) operations are performed using the POST, GET, PUT and DELETE methods in the REST interface.

POST: This Verb is used to create a new resource on a server.

The Post method works to send data to the server. You may add or update data using the Post request. We send the information that needs to update in the request body. In the real world, the form data on website updates using the Post request. Some of the critical features of a POST method are-

Data passed through the POST method is not visible in the browser URL.
Additionally, values passed through POST are not stored in browser history.
Moreover, there is no restriction on the length of data sent through the POST method.
Also, POST method request supports different data types like String, binary, integers, etc.

GET: This Verb is used to get or read data from a server.

As the name suggests, the Get method fetches the information from the server. Moreover, it is the most commonly used method which does not have a request body. Every time you open a website, the Get request fires to retrieve the website contents. Additionally, it is equivalent to the read operation. Some of the main features of the GET method are-

We can easily bookmark the data using the GET method.
The limit of the length of values is generally 255 characters for the GET method.
GET supports only string data types.
GET requests are cacheable.
The parameters passed in GET methods store in the browser history.

HEAD: The Head method is similar to the Get method, but it retrieves only the header data and not the entire response body. Moreover, we use it when you need to check the document's file size without downloading the document.

PUT or PATCH: Both PUT and PATCH Verbs are used to update a resource on a server. The PUT method is used to update the record entirely. The PATCH method is used to update the record partially instead of updating the entire resource.

PUT: The Put method is similar to the Post method since it updates the data. The only difference is that we use it when we have to replace an existing entity completely. Also, PUT methods are idempotent, i.e., they return the same result on executing repeatedly.

PATCH: This method is again similar to Post and Put methods, but we use it when we have to update some data partially. Moreover, unlike the Post and Put methods, you may send only the entity that needs updation in the request body with the Patch method.

DELETE: This Verb is used to delete a resource from a server.

DELETE: Like its name, the Delete method deletes the server's representations of resources through the specific URL. Additionally, just like the Get method, they do not have a request body.

OPTIONS: This is not a widely used method when compared to other ones. It returns data specifying the different methods and the operations supported by the server at the given URL. Moreover, it responds with an Allow header giving a list of the HTTP methods allowed for the resource.


7. Headers
Headers represent the meta-data associated with HTTP requests or responses. It is the additional information that is passed between client and server along with the request or response. Headers are used for several purposes, such as authentication, caching, messaging body information, handling cookies, etc. Headers will be key-value pairs or can be a key with multiple values.

8. Payload/Body
The Payload/Body contains the information that the user wants to send to the server. The payload is used only with the requests that alter the existing resource or create new ones.

9. HTTP Response: The HTTP Response consists of the status code, Headers and Response body.

Every HTTP Response received as a result of an HTTP request sent by the client to the server has a status code. This status code value tells us if HTTP Response was successful or not.  This article is a continuation of our previous article in which we performed a sample REST API test call. In this article, we will discuss how to validate the HTTP response status using REST Assured. The content of the post is reflected by the following index:

As we already know the same REST API returns a response message in XML or JSON format. This format depends on the Media-Type attribute in the HTTP request.

But then how will the client know what type of response it will get from the API? Well, this is managed by the response headers. Response Header contains a Content-Type attribute that informs about the type of response body format.
How to validate HTTP response status code
Validating the HTTP error status code?
How to validate HTTP Response Status Line?

Validate HTTP Response Status using Rest Assured

An HTTP response object typically represents the HTTP packet (response packet) sent back by Web Service Server in response to a client request. An HTTP Response contains:

A status.
Collection of Headers.
A Body.
We have a detailed article on HTTP Response here.

So when we say we need to validate HTTP response status, we are looking forward to having a mechanism to read and validate the entire response object including the status, headers, and the body. Hence, we will validate each of the HTTP response components separately. So in this article, the validation of an HTTP response status will be dealt with in three parts as follows:

Validating HTTP Response Status Code.

Rest Assured library provides a package named "io.restassured.response" which has a Response interface. The Response interface provides methods that can help to get parts of the received response. The following screenshot shows some of the important methods of the response interface.

How to validate the Error Status Code

So far the request-response situations are all good and we have only received 200 status codes indicating successful requests. But this may not be always true in the real world. There can be reasons like the server is down or REST API not functioning properly or the requests themselves may be problematic. In conclusion, we may face the following scenarios:

The server hosting REST API is down.
Incorrect client request.
The resource requested by the client does not exist.
An error occurs on the server side during the processing of the request.
So when any of the above scenarios occur, the REST API will return an appropriate status code other than 200. The client in turn has to validate this status code and process it accordingly.

Validating Response Status Line.

A "Status-Line" is the first line returned in the HTTP response. The status line consists of three substrings:

HTTP protocol version.
Status Code.
Status Code’s string value.

As we already discussed Headers and Body we will focus on Status Codes
Status Codes : HTTP status codes help us to understand the status of the response quickly.

100–199: Informational: The request received and process continuing
200–299: Success: The request succeeded
300–399: Redirection: The request is redirecting to another URL
400–499: Client Error: An error occurred from client-side
500–599: Server Error: An error occurred from the server-side

Automate HTTP Request

We know that REST Assured supports BDD format i.e given, when and then statements
given() — We provide all the input details here i.e. Base URI, Headers, Path Parameter, Query Parameter, and Request Body/Payload.
when() — We specify the Resource, HTTP Request method like POST, GET, PUT, PATCH, or DELETE.
then() — We validate the response i.e the response code, response time, response message, response headers, response body, etc.

Sending payload to the request

Let us see the different ways of sending payload to the request -

1. Send payload to the request body using string

2. Send payload to the request body using JSON Object

3. Send JSON File as payload to request body

4. Using RequestSpecification for Repeated statements in the Request
        RequestSpecification is used for reducing the redundant lines of code in the requests. It is an interface, we cannot create the object hence to get a reference we call the given() method of rest assured. Consider the below example with two requests put and delete with the same base URL, header, payload, etc.


Validate HTTP Response

1. Validate Status Code, Headers, and Response Body
Validation can be performed by using in-built rest assured methods as shown below

2. Extract Response and Parse using JsonPath

3. Using ResponseSpecification for Repeated Statements in the Response

4. ResponseSpecification is used to specify how the expected response should be for a test to pass. It is an interface, we cannot create the object hence to get a reference we call the expect() method of rest assured. Consider the below example with two requests having the same assertions like statuscode, time, statusLine, etc.

